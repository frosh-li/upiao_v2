(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[17],{

/***/ "./js/blocks/customTree.js":
/*!*********************************!*\
  !*** ./js/blocks/customTree.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function($) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__,__webpack_require__(/*! api */ \"./js/api.js\"),__webpack_require__(/*! context */ \"./js/context_model.js\"),__webpack_require__(/*! ui */ \"./js/ui.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(require,API,context,ui){\n    var treeView = null,\n        overFlag = false,\n        View = Backbone.View.extend({\n            el:\"#dataItem\",\n            events:{\n                \"blur .level-title-input\":\"onBlur\",\n                \"click .delete-level\":\"onDel\",\n                \"click .add-level\":\"onAddSub\",\n                \"click .add-same-level\":\"onAddSame\"\n            },\n            initialize:function(){\n                var _this = this;\n                _this.listenTo(Backbone.Events,\"tree:get:fail\",function(res){\n                    if(\"-1\" == res.response.code){\n                        _this.data = [];\n                        _this.render();\n                        overFlag = true;\n                    }\n                });\n                _this.listenTo(Backbone.Events,\"tree:get\",function(data){\n                    //_this.data = data;\n                    _this.data = data;\n                    _this.render();\n                    overFlag = true;\n                });\n                _this.listenTo(Backbone.Events,\"tree:create\",function(data){\n                    alert(\"添加成功\");\n                    API.getTreeInfo();\n                    API.getNavData();\n                });\n                _this.listenTo(Backbone.Events,\"tree:update\",function(data){\n                    alert(\"修改成功\");\n                    API.getTreeInfo();\n                    API.getNavData();\n                });\n                _this.listenTo(Backbone.Events,\"tree:delete\",function(data){\n                    alert(\"删除成功\")\n                    API.getTreeInfo();\n                    API.getNavData();\n                });\n            },\n            onAddSub:function(evt){\n                var _this = this,\n                    $el = $(evt.target),\n                    itemData = _this.getItemData($el),\n                    $subWrap = $el.parents('.tree-item-wrap').children(\".tree-info-subitem-sub\").eq(0),\n                    $itemWrap = $el.parents('.tree-item-wrap').eq(0),\n                    $siblingsItems = $itemWrap.parent(\".tree-info-subitem-sub\").children(\".tree-item-wrap\");\n\n                var itemHtml = getSubHtml(false,false,parseInt($itemWrap.attr('level'))+1);\n                $subWrap.append(itemHtml);\n                $subWrap.children(\".tree-info-subitem\").eq(0).addClass('same-level');\n\n\n                if($siblingsItems.length>1){\n                    $siblingsItems.addClass('same-level');\n                    $siblingsItems.last().removeClass('same-level');\n                }else{\n                    $siblingsItems.removeClass('same-level');\n                }\n            },\n            onAddSame:function(evt){\n                var _this = this,\n                    $el = $(evt.target),\n                    itemData = _this.getItemData($el),\n                    $itemWrap = $el.parents('.tree-item-wrap').eq(0);\n\n                var itemHtml = getSubHtml(false,false,itemData.level);\n                $(itemHtml).insertAfter($itemWrap);\n                $itemWrap.addClass('same-level');\n\n            },\n            scrollToRightBottom:function(){\n                $(\".tree-info-body\").scrollTop($(\".tree-info-body\").height());\n                $(\".tree-info-body\").scrollLeft($(\".tree-info-body\").width());\n            },\n            onDel:function(evt){\n                var _this = this,\n                    $el = $(evt.target),\n                    title = $el.siblings('.level-name').val(),\n                    $itemWrap = $el.parents('.tree-item-wrap').eq(0),\n                    itemData = _this.getItemData($el);\n\n                if(confirm(\"是否确认删除此节点\")){\n                    if(itemData && itemData.id){\n                        API.deleteTree(itemData);\n                    }else{\n                        $itemWrap.remove();\n                    }\n                }\n            },\n            onBlur:function(evt){\n                var _this = this,\n                    $el = $(evt.target),\n                    title = $el.val(),\n                    currentTitle = $el.attr('current-title'),\n                    itemData;\n\n                if(title == currentTitle){\n                    return;\n                }\n                itemData = _this.getItemData($el);\n                if(itemData){\n                    itemData.title = title;\n                    if(itemData.id){\n                        if(!itemData.title || !itemData.title.length){\n                            alert('标题不可直接清空');\n                            return;\n                        }\n                        API.updateTree(itemData);\n                    }else{\n                        API.createTree({\n                            title:title,\n                            pid:$el.parents(\".tree-item-wrap[treeid!='']\").attr(\"treeid\")\n                        });\n                    }\n                }\n            },\n            getItemData:function($el){\n                if($el && $el.length){\n                    var $itemWrap = $el.parents('.tree-item-wrap');\n                    return {\n                        id:$itemWrap.attr('treeid'),\n                        pid:$itemWrap.attr('pid'),\n                        level:$itemWrap.attr('level')\n                    }\n                }else{\n                    return false;\n                }\n            },\n            filterData:function(treeData){\n                var subTreesDataMap = null,\n                    rootData = null,\n                    firsLevel = [];\n                $.each(treeData,function(i,ld){\n                    if(!ld.pid || \"0\" == ld.pid){\n                        rootData = ld;\n                    }else{\n                        subTreesDataMap = subTreesDataMap || {};\n                        subTreesDataMap[ld.id] = ld;\n                        ld[\"subhtml\"] = \"\";\n                        ld[\"hasSameLevelClass\"] = \"\";\n                        ld[\"level\"] = \"\";\n                        var roleid = JSON.parse(localStorage.getItem('userinfo')).role;\n                        if(roleid != 1){\n                            ld['ifhide'] = \"hide\";\n                        }else{\n                            ld['ifhide'] = \"\";\n                        }\n                        subTreesDataMap[ld.id].html = _.template($(\"#treeInfoItemTpl\").html())(ld);\n                    }\n                })\n\n\n                if(subTreesDataMap){\n                    $.each(subTreesDataMap,function(id,d){\n                        if(d.pid) {//链接上下级关系\n                            //第一层\n                            if(rootData.id == d.pid){\n                                firsLevel.push(id);\n                            }else if(subTreesDataMap[d.pid]){\n                                //上下级关系\n                                if(subTreesDataMap[d.pid].sids){\n                                    subTreesDataMap[d.pid].sids.push(id);\n                                }else{\n                                    subTreesDataMap[d.pid].sids = [id];\n                                }\n                            }else{\n                                alert(\"数据解析失败\");\n                            }\n                        }\n                    })\n                }\n\n                return {\n                    root:rootData,\n                    sub:subTreesDataMap,\n                    first:firsLevel\n                }\n            },\n            render:function(){\n                var _this = this,\n                    _data = _this.data,\n                    _levelNum = _data.num||5;\n                //$(\"#dataItem\").html($(\"#treeInfoTpl\").html());\n\n                if(_data.list && _data.list.length){\n                    var treeData = _this.filterData(_data.list);\n                    if(treeData.root){\n                        $(\"#dataItem\").html(_.template($(\"#treeInfoTpl\").html())(treeData.root));\n                    }else{\n                        alert(\"缺少顶级层数据\");\n                    }\n                    if(treeData.first.length){\n                        var subTreeHtml='';\n                        $.each(treeData.first,function(i,id){\n                            if(treeData.first.length>1 && (i != treeData.first.length-1)){\n                                treeData.sub[id].hasSameLevelClass = 'same-level';\n                            }\n                            subTreeHtml+= getSubHtml(id,treeData.sub,1);\n                        })\n                    }else{\n                        subTreeHtml =  getSubHtml()\n                    }\n\n                    $(\".tree-info-subwrap\").html(subTreeHtml);\n                }else{\n                    $(\".tree-info-subwrap\").html($(\"#treeInfoItemTpl\").html());\n                }\n\n                ui.setH();\n\n            },\n            destory:function(){\n                console.log('detroy tree')\n                this.stopListening()\n            }\n        });\n\n\n    function getSubHtml(id,map,level){\n        var _html = '',\n            sid = id?map[id].sids:[],\n            level = parseInt(level);\n\n        if(sid && sid.length){\n            var len = sid.length;\n            $.each(sid,function(i,_id){\n                if(sid.length>1 && (i != len-1)){\n                    map[_id].hasSameLevelClass = 'same-level';\n                }\n                _html += getSubHtml(_id,map,level+1);\n            })\n            return _.template($(\"#treeInfoItemTpl\").html())($.extend(map[id],{subhtml:_html,level:level}));\n        }else{\n            if(id && map[id]){\n                return _.template($(\"#treeInfoItemTpl\").html())($.extend({},map[id],{\n                    subhtml:'',\n                    level:level\n                }));\n            }else{\n                data = id&&map?map[id]:{};\n                return _.template($(\"#treeInfoItemTpl\").html())($.extend(data,{\n                    id:'',\n                    pid:'',\n                    title:'',\n                    level:level,\n                    hasSameLevelClass:'',\n                    subhtml:'',\n                    ifhide:''\n                }));\n            }\n        }\n    }\n\n    return {\n        init:function(sys,listType,sub){\n            treeView = new View();\n            API.getTreeInfo();\n        },\n        isOver:function(value){\n            if(typeof value == 'undefined'){\n                return !!overFlag;\n            }else{\n                overFlag = !!value;\n            }\n        },\n        destory:function(){\n            treeView.destory();\n        }\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./libs/jquery.min.js */ \"./libs/jquery.min.js\")))\n\n//# sourceURL=webpack:///./js/blocks/customTree.js?");

/***/ })

}]);