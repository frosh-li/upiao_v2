(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[12],{

/***/ "./js/blocks/areaSelector.js":
/*!***********************************!*\
  !*** ./js/blocks/areaSelector.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function($) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__,__webpack_require__(/*! api */ \"./js/api.js\"),__webpack_require__(/*! backbone */ \"./libs/backbone-min.js\"),__webpack_require__(/*! zTreeExcheck */ \"./libs/jquery.ztree.excheck-3.5.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(require,API,Backbone){\n    var zTree,\n        setting = {\n            check: {\n                enable: true,\n                chkStyle:\"checkbox\",\n                nocheckInherit:true\n            },\n            data: {\n                key:{\n                    name:'title'\n                },\n                simpleData: {\n                    enable: true,\n                    pIdKey: 'pid'\n                }\n            }\n        },\n        view;\n    var extobj = {\n        name:\"nav\",\n        data:null,\n        tree:null,\n        navPlugin:null,\n        ids:[],\n        checkedall:false,\n        initialize:function(option){\n            var _this = this;\n            _this.option={};\n            $.extend(_this.option,option||{});\n            _this.listenTo(Backbone.Events,\"tree:get\",function(data){\n                _this.data = data.list;\n                _this.filterData();\n                _this.render();\n            });\n        },\n        filterData:function(){\n            var _this = this;\n\n            if(_this.data){\n                $.each(_this.data,function(i,d){\n                    // console.log('yes data', d.id, _this.option.value);\n                    if(_this.option.value == \"*\"){\n                        d.checked = true;\n                    }else{\n\n\n                        if(_this.option.value && _this.option.value.split(\",\").indexOf(d.id) > -1 ){\n                            console.log('yes data', d.id);\n                            d.checked = true\n                        }\n                    }\n                })\n            }\n        },\n        getCheckedData:function(){\n            this.ids = [];\n            var _this = this;\n            var checkedNodes = this.tree.getCheckedNodes(),\n                checkedData = {};\n            var all = false;\n            var allnode = this.tree.getNodes();\n\n            $.each(checkedNodes,function(i,node){\n                _this.ids.push(node.id);\n                checkedData[node.id] = {\n                    id:node.id,\n                    pId:node.pId,\n                    name:node.name,\n                    level:node.level\n                }\n            })\n            console.log(allnode.length, checkedNodes.length)\n            if(_this.data.length == checkedNodes.length){\n                _this.checkedall = true;\n            }\n            return checkedData;\n        },\n        getValue:function(){\n            this.getCheckedData();\n            if(this.checkedall){\n                return \"*\";\n            }\n            return this.ids.join(\",\");\n        },\n        setValue:function(id){\n            if(id){\n                var node = this.tree.getNodesByParam(\"id\",id);\n                this.tree.checkNode(node,true,true);\n            }\n        },\n        destroy:function(){\n            this.stopListening();\n        },\n        render:function(){\n            var _this = this,$radios;\n            _this.ids = [];\n            $.fn.zTree.init($(\"#treesWrap\"), setting, _this.data);\n            console.log('tree data', _this.data);\n            _this.tree = $.fn.zTree.getZTreeObj('treesWrap');\n            _this.tree.expandAll(true);\n            return this;\n        }\n    }\n\n    return {\n        init:function(option){\n            view = new (Backbone.View.extend(extobj))(option);\n            API.getTreeInfo();\n            return view;\n        }\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./libs/jquery.min.js */ \"./libs/jquery.min.js\")))\n\n//# sourceURL=webpack:///./js/blocks/areaSelector.js?");

/***/ }),

/***/ "./js/dialog-personalEdit.js":
/*!***********************************!*\
  !*** ./js/dialog-personalEdit.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function($) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__,__webpack_require__(/*! api */ \"./js/api.js\"),__webpack_require__(/*! common */ \"./js/common.js\"),__webpack_require__(/*! blocks/areaSelector */ \"./js/blocks/areaSelector.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(require,API,common,areaSelector){\r\n    var view = null,\r\n        config = {\r\n            extobj : {\r\n                data:null,\r\n                listPlugin:[],\r\n                el:'#personalEditTpl-dialog',\r\n                events:{\r\n                    \"click .submit-btn\":\"onsubmit\",\r\n                    \"click .cancel-btn\":\"oncancel\"\r\n                },\r\n                initialize:function(data){\r\n                    var _this = this;\r\n                    _this.level = areaSelector.init();\r\n                    _this.listenTo(Backbone.Events,\"personalInfo:get\",function(data){\r\n                        _this.data = data;\r\n                        this.level = areaSelector.init({value:data.area});\r\n                        _this.setValue();\r\n                    });\r\n                    _this.listenTo(Backbone.Events,\"personal:create personal:update\",function(){\r\n                        // return;\r\n                        window.location.reload();\r\n                        _this.oncancel();\r\n                        Backbone.Events.trigger(\"listdata:refresh\", \"batteryInfo\");\r\n                    });\r\n                    _this.listenTo(Backbone.Events,\"personal:create:fail\",function(data){\r\n                        console.log(data);\r\n                        if (data.response.code == -1){\r\n                            alert('已经存在相同的用户！');\r\n                        }else if(data.response.code == -2){\r\n                            alert(data.response.msg);\r\n                        }\r\n                    });\r\n\r\n                    _this.listenTo(Backbone.Events,\"personal:update:fail\",function(data){\r\n                        alert(data.response.msg);\r\n                        return;\r\n                        //Backbone.Events.trigger(\"listdata:refresh\", \"batteryInfo\");\r\n                    });\r\n                    $('[key=role]').prev().find('li a').click(function(){\r\n                        // console.log($(this).attr('index'));\r\n                        var user = $(this).html();\r\n                        if (user == '观察员'){\r\n                            $('[key=canedit]').prev().prev().find('span').html('否');\r\n                            $('[key=canedit]').prev().find('li a').removeClass().eq(1).addClass('selected');\r\n                            $('[key=canedit] option[index=1]').attr(\"selected\",true);\r\n                        }else{\r\n                            $('[key=canedit]').prev().prev().find('span').html('是');\r\n                            $('[key=canedit]').prev().find('li a').removeClass().eq(0).addClass('selected');\r\n                            $('[key=canedit] option[index=0]').attr(\"selected\",true);\r\n                        }\r\n                        // console.log(user);\r\n                    });\r\n                },\r\n                setValue:function(){\r\n                    if(this.data){\r\n                        common.setFormValue(this.el,this.data);\r\n                    }\r\n                },\r\n                getParam:function(){\r\n                    return common.getFormValue(this.el,true);\r\n                },\r\n                showErrTips:function(tips){\r\n                    alert(tips);\r\n                    return false;\r\n                },\r\n                validate:function(param){\r\n                    return true;\r\n                },\r\n                onsubmit:function(){\r\n                    var _this = this,\r\n                        _param = _this.getParam();\r\n                    _param.area = this.level.getValue();\r\n                    _param.role = $(\"[key=role]\",this.el).val();\r\n                    _param.canedit = $(\"[key=canedit]\",this.el).val();\r\n                    console.log(_param);\r\n                    console.log(this.level,'level');\r\n                    if(_this.validate(_param)){\r\n                        if(_param.id){\r\n                            API.updatePersonalInfo(_param);\r\n                        }else{\r\n                            API.createPersonal(_param);\r\n                        }\r\n                    }\r\n                },\r\n                oncancel:function(){\r\n                    this.stopListening();\r\n                    this.dialogObj.dialog( \"destroy\" );\r\n                    $(\".ui-dialog,.ui-widget-overlay\").remove();\r\n                    this.level.destroy();\r\n                    this.level = null;\r\n                }\r\n            }\r\n        };\r\n    return {\r\n        show:function(id){\r\n            var _this = this;\r\n            var $dialogWrap = $(\"#personalEditTpl-dialog\").length?$(\"#personalEditTpl-dialog\").replaceWith($($(\"#personalEditTpl\").html())):$($(\"#personalEditTpl\").html());\r\n            try{\r\n                var roleid = JSON.parse(localStorage.getItem('userinfo')).role;\r\n            }catch(e){\r\n                var roleid = 3;\r\n                console.log(e);\r\n            }\r\n\r\n            $dialogWrap.dialog({\r\n                modal:true,\r\n                show:300,\r\n                height:500,\r\n                width:1000,\r\n                title:id?\"编辑人员信息\":\"添加人员\",\r\n                close:function(evt,ui){\r\n                    view.oncancel();\r\n                },\r\n                open:function(){\r\n                    if (roleid == 2){\r\n                        $('[key=role]').prev().find('li').eq(0).remove();\r\n                        $('[key=role] option').eq(0).remove();\r\n                    }\r\n\r\n                    $(\"form.jqtransform\").jqTransform();\r\n\r\n                    view = new (Backbone.View.extend(config.extobj))();\r\n                    view.dialogObj = $(this);\r\n\r\n                    if(id){\r\n                        API.getPersonalInfo({id:id}, function(){\r\n                            console.log('get data');\r\n                        });\r\n                    }else{\r\n                        _this.level = _this.level || areaSelector.init();\r\n                        console.log(_this.level);\r\n                    }\r\n\r\n                }\r\n            });\r\n        },\r\n        detroy:function(){\r\n            view.oncancel();\r\n        }\r\n    };\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./libs/jquery.min.js */ \"./libs/jquery.min.js\")))\n\n//# sourceURL=webpack:///./js/dialog-personalEdit.js?");

/***/ })

}]);