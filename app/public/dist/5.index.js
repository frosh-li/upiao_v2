(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[5],{

/***/ "./js/blocks/nav.js":
/*!**************************!*\
  !*** ./js/blocks/nav.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function($) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;window.NavDatas = null;\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__,__webpack_require__(/*! api */ \"./js/api.js\"),__webpack_require__(/*! backbone */ \"./libs/backbone-min.js\"),__webpack_require__(/*! context */ \"./js/context_model.js\"),__webpack_require__(/*! common */ \"./js/common.js\"),__webpack_require__(/*! zTreeExcheck */ \"./libs/jquery.ztree.excheck-3.5.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(require,API,Backbone,context,common){\n    var zTree,\n        overFlag = false,\n        setting = {\n            check: {\n                enable: true\n            },\n            data: {\n                key:{\n                    name:'title'\n                },\n                simpleData: {\n                    enable: true,\n                    pIdKey: 'pid'\n                }\n            },\n            callback:{\n                onCheck:function(){\n                    overFlag=false;\n                    context.setCurStations(navView.getCheckedData());\n                }\n            }\n        },\n        navView;\n    var nav_extobj = {\n        el:$(\"#nav\"),\n        name:\"nav\",\n        data:null,\n        tree:null,\n        navPlugin:null,\n        initialize:function(data){\n            var _this = this;\n            _this.listenTo(Backbone.Events,\"nav:update\",function(data){\n                if(NavDatas == JSON.stringify(data)){\n                    return;\n                }\n                NavDatas = JSON.stringify(data);\n                console.log('nav update', data);\n                _this.data = data.list;\n                _this.filterData().render();\n                overFlag = true;\n            });\n        },\n        /*selectFirst:function(){\n         if(this.tree){\n         var nodes = this.tree.getNodes();\n         if(nodes.length){\n         this.tree.checkNode(nodes[0],true,true,true);\n         }\n         }\n         },*/\n        filterData:function(){\n            return this;\n        },\n        getCheckedData:function(){\n            var checkedNodes = this.tree.getCheckedNodes(),\n                checkedData = {};\n            $.each(checkedNodes,function(i,node){\n                checkedData[node.id] = {\n                    id:node.id,\n                    pId:node.pId,\n                    name:node.name,\n                    level:node.level\n                }\n            })\n            return checkedData;\n        },\n        expandNode:function(){\n            var tree = this.tree;\n            var nodes = tree.transformToArray(tree.getNodes());\n            for(var i = 0 ; i < nodes.length ; i++){\n                var cnode = nodes[i];\n                if(cnode.leveltype == 3){\n                    tree.expandNode(cnode,false);\n                }else{\n                    tree.expandNode(cnode,true);\n                }\n            }\n        },\n        render:function(){\n            console.log('render tree now',this.ids);\n            $.fn.zTree.init($(\"#nav\"), setting, this.data);\n            this.tree = $.fn.zTree.getZTreeObj('nav');\n            // this.tree.expandAll(false);\n            this.expandNode();\n            var _this = this;\n            var hash = window.location.hash;\n            if(/^#\\/manage\\/station\\/[0-9]+$/.test(hash)){\n                this.ids = {\n                    sid: hash.match(/([0-9]+)/)[1]\n                }\n            }\n            if(this.ids){\n                if(this.ids.sid){\n\n                    var nodes = this.tree.getNodes();\n                    for (var i=0, l=nodes.length; i < l; i++) {\n                        if(nodes[i].leveltype === 1){\n                            var childrens = nodes[i].children;\n                            for(var j = 0 ; j < childrens.length ;j++){\n                                var subChildren = childrens[j].children;\n                                if(!subChildren){\n                                    continue;\n                                }\n\n                                for(var k = 0 ; k < subChildren.length ; k++){\n                                    subChildren[k].children.forEach(function(node){\n\n                                        if(node.leveltype === 2){\n                                            if(node.id === _this.ids.sid){\n\n                                                _this.tree.checkNode(node, true, true);\n                                            }\n                                            //this.tree.checkNode(node, true, true);\n                                        }\n                                    });\n\n                                }\n                            }\n\n                        }\n\n                    }\n                }\n            }else{\n                this.tree.checkAllNodes(true);\n            }\n            return this;\n        }\n    }\n\n    return {\n        init:function(sys,listType,sub,ids){\n            if(!navView){\n                navView = new (Backbone.View.extend($.extend(true,{},nav_extobj,{ids:ids})))();\n            }else{\n                // delete navView;\n            }\n\n\n            return this;\n        },\n        run:function(cb){\n            API.getNavData(cb);\n        },\n        isOver:function(value){\n            if(typeof value == 'undefined'){\n                return !!overFlag;\n            }else{\n                overFlag = !!value;\n            }\n        },\n        getSites:function(){\n            var ids={ids:[],map:{}, pids: []},selectedNode;\n            if(navView.tree){\n                var selectedNode = navView.tree.getCheckedNodes();\n                $.each(selectedNode,function(i,node){\n                    if(node.leveltype == \"2\"){\n                        ids.ids.push(node.id);\n                        ids.pids.push(node.pid);\n                        ids.map[node.id] = node;\n                    }\n                })\n            }\n            return ids;\n        },\n        getTrueSites: function(){\n            var ids={ids:[],map:{}, pids: []},selectedNode;\n            if(navView.tree){\n                var selectedNode = navView.tree.getCheckedNodes();\n                $.each(selectedNode,function(i,node){\n                    if(node.leveltype == \"2\" && node.children && node.children.length > 0){\n                        ids.ids.push(node.id);\n                        ids.pids.push(node.pid);\n                        ids.map[node.id] = node;\n                    }\n                })\n            }\n            return ids;  \n        },\n        getSelectedNodePid: function(){\n            var getSelectedNodeId = [];\n            if(navView.tree){\n                var nodes = navView.tree.getSelectedNodes();\n                $.each(nodes, function(i,node){\n                    getSelectedNodeId.push(node.pid);\n                })\n\n            }\n            return getSelectedNodeId;\n        },\n        getSelectedNodeId: function(){\n            var getSelectedNodeId = -1;\n            if(navView.tree){\n                var nodes = navView.tree.getSelectedNodes();\n                $.each(nodes, function(i,node){\n                    getSelectedNodeId = node.id;\n                })\n\n            }\n            return getSelectedNodeId\n        },\n        getGroups:function(){\n            var ids={ids:[],map:{}},selectedNode;\n            if(navView.tree){\n                selectedNode = navView.tree.getCheckedNodes();\n                $.each(selectedNode,function(i,node){\n                    if(node.leveltype == \"3\"){\n                        ids.ids.push(node.id);\n                        ids.map[node.id] = node;\n                    }\n                })\n            }\n            return ids;\n        },\n        getBatterys:function(siteid){\n            var ids={ids:[],map:{}},groups,groupids=[],selectedNode;\n\n            if(siteid){\n                groups = this.getGroups();\n                $.each(groups.ids,function(i,id){\n                    if(groups.map[id].pid == siteid){\n                        groupids.push(id);\n                    }\n                })\n            }\n            if(siteid && !groupids.length){return false}\n            if(navView.tree){\n                selectedNode = navView.tree.getCheckedNodes();\n                $.each(selectedNode,function(i,node){\n                    if(node.leveltype == \"4\"){\n                        if(groupids && groupids.length && !common.inArray(node.pid,groupids)){\n                            return;\n                        }\n                        // console.log(siteid, node.id)\n                        if(node.id.substring(0,10) == siteid){\n                            ids.ids.push(node.id);\n                            ids.map[node.id] = node;\n                        }\n                    }\n                })\n            }\n            \n            console.log('getBatterys', ids, siteid);\n            return ids;\n        },\n        getBatteryIds: function(){\n            var ids={ids:[],map:{}},selectedNode;\n            if(navView.tree){\n                selectedNode = navView.tree.getCheckedNodes();\n                $.each(selectedNode,function(i,node){\n                    if(node.leveltype == \"4\"){\n                        ids.ids.push(node.id);\n                        ids.map[node.id] = node;\n                    }\n                })\n            }\n            return ids;\n        }\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./libs/jquery.min.js */ \"./libs/jquery.min.js\")))\n\n//# sourceURL=webpack:///./js/blocks/nav.js?");

/***/ })

}]);